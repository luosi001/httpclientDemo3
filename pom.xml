<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.luosi</groupId>
  <artifactId>httpclientDemo3</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <properties>
  	<maven.compiler.target>1.8</maven.compiler.target>
  	<maven.compiler.source>1.8</maven.compiler.source>
  	<!--文件拷贝时的编码-->
  	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  	<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  	<!-- 编译时的编码 -->
  	<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
  	<aspectj.version>1.8.9</aspectj.version>
  </properties>
  <dependencies>
  	<dependency>
  		<groupId>org.testng</groupId>
  		<artifactId>testng</artifactId>
  		<version>6.8.8</version>
  		<!-- <scope>test</scope> -->
  	</dependency>
  	<dependency>
  		<groupId>org.apache.httpcomponents</groupId>
  		<artifactId>httpclient</artifactId>
  		<version>4.5.6</version>
  	</dependency>
  	<dependency>
	    <groupId>com.alibaba</groupId>
	    <artifactId>fastjson</artifactId>
	    <version>1.2.58</version>
	</dependency>
  	<!-- 使用easypoi就不需要这个包了
  	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi-ooxml</artifactId>
		<version>3.17</version>
	</dependency> -->
	<!-- easypoi start 使用easypoi可将pojo属性和excel列数据对应  easypoi回写文件会重新生成一个文件，原始poi则可以会写至原文件？-->
	<dependency>
		<groupId>cn.afterturn</groupId>
		<artifactId>easypoi-base</artifactId>
		<version>4.0.0</version>
	</dependency>
	<dependency>
		<groupId>cn.afterturn</groupId>
		<artifactId>easypoi-annotation</artifactId>
		<version>4.0.0</version>
	</dependency>
	<!-- easypoi end -->
	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-validator</artifactId>
		<version>5.2.4.Final</version>
	</dependency>
	<dependency>
		<groupId>javax.el</groupId>
		<artifactId>javax.el-api</artifactId>
		<version>2.2.4</version>
	</dependency>
	<!-- mysql驱动 -->
	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
		<version>5.1.38</version>
	</dependency>
	<!-- 数据库连接工具包DBUtils -->
	<dependency>
		<groupId>commons-dbutils</groupId>
		<artifactId>commons-dbutils</artifactId>
		<version>1.6</version>
	</dependency>
	<!-- 日志 log4j -->
	<dependency>
		<groupId>log4j</groupId>
		<artifactId>log4j</artifactId>
		<version>1.2.17</version>
	</dependency>
	<!-- allure报表 -->
	<dependency>
		<groupId>io.qameta.allure</groupId>
		<artifactId>allure-testng</artifactId>
		<version>2.6.0</version>
		<!-- <scope>test</scope> -->
	</dependency>
  </dependencies>
  <build>
		<plugins>
			<plugin>
				<!-- maven-surefire-plugin 配合testng/junit执行测试用例的maven插件 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.1</version>
				<configuration>
					<!-- 测试失败后，是否忽略并继续测试 -->
					<testFailureIgnore>true</testFailureIgnore>
					<suiteXmlFiles>
						<!-- testng配置文件名称 -->
						<suiteXmlFile>testng.xml</suiteXmlFile>
					</suiteXmlFiles>
					<!--设置参数命令行 -->
					<argLine>
						<!-- UTF-8编码 -->
						-Dfile.encoding=UTF-8
						<!-- 配置拦截器 -->
						-javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/1.9.2/aspectjweaver-1.9.2.jar"
					</argLine>
					<systemProperties>
						<property>
							<!-- 配置 allure 结果存储路径 -->
							<name>allure.results.directory</name>
							<value>${project.build.directory}/allure-results</value>
						</property>
					</systemProperties>
				</configuration>
				<dependencies>
					<!-- aspectjweaver maven坐标 -->
					<dependency>
						<groupId>org.aspectj</groupId>
						<artifactId>aspectjweaver</artifactId>
						<version>1.9.2</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>
</project>